How to use Git and Github

Clone: lấy dữ liệu về local
Push: đẩy dữ liệu lên cloud
Pull: cập nhật phiên bản mới nhất cho local
Fetch: tạo nhánh

!!! git pull origin main: lấy phiên bản mới nhất trước khi bắt đầu làm việc
!!! tạo .gitignore (hidden file): avoid conflict

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
git clone [link]: lấy dữ liệu về máy tính | remote repository -> working copy (local repository)
git status: kiểm tra có sự thay đổi 
git add [file/folder]: thêm những file/folder có sự thay đổi | working copy -> staging area 
git commit -m '[message]':   | staging area -> local repository
git push origin [main]: đẩy dữ liệu lên nhánh main (có thể có nhiều nhánh) | local repository -> remote repository
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


------------Branch------------
git branch: xem nhánh hiện tại đang làm việc
git branch [name]: tạo nhánh mới
git checkout [name]: chuyển nhánh làm việc

// git push origin [branchName]
// create pull requests

git branch -d [branchName]: xóa ở local
git branch -D [branchName]
git push origin :[branchName]: xóa ở cloud


-----------Xử lý xung đột-----------
Vd: khi chưa cập nhật phiên bản mới mà làm việc trên phiên bản cũ

Nguyên tắc: chỉ trộn từ main vào branch => tránh ảnh hưởng đến main
git pull origin main -> git checkout [branchName] -> git merge main 


-------------------------------------------------------------------------------------------
// git add . :add toàn bộ, không nên sử dụng vì sẽ có 1 số file chưa được cấu hình ignore
// git diff [fileName]: kiểm tra file đã thay đổi như thế nào

// Giao thức HTTP: yêu cầu username và password của github khi lần đầu push
// Giao thức SSH: sử dụng [private key/ public key] để xác thực tự động


git checkout [fileName]: đưa file về trạng thái ban đầu (chưa được thay đổi, phiên bản HEAD)
git checkout -b [branchName]: tạo branch (nếu chưa có) và chuyển sang branch đó để làm việc
git reset [fileName]: staging area -> working copy

Chỉ được chuyển nhánh khi đã commit ở nhánh hiện tại 
=> dùng git stash: lưu trạng thái đang làm việc vào stash, đồng thời đưa nhánh đang làm việc về trạng thái ban đầu
git stash list -> git stash apply [id_stash] (id_stash = null -> apply all)

git log [-number] (number: số commit muốn xem | -number = null -> show all): list các commit đã đưa lên
git log --oneline

git rm [fileName]


=====================================================================================================
git --help

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects
